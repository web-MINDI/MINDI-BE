"""add_report_logs_table

Revision ID: c85d2a6b6a2f
Revises: 942c76cb7e89
Create Date: 2025-08-08 18:01:12.531450

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import mysql

# revision identifiers, used by Alembic.
revision: str = 'c85d2a6b6a2f'
down_revision: Union[str, Sequence[str], None] = '942c76cb7e89'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    # 기존 테이블들이 존재하는지 확인 후 삭제
    connection = op.get_bind()
    
    # care_weekly_reports 테이블이 존재하는지 확인
    inspector = sa.inspect(connection)
    if 'care_weekly_reports' in inspector.get_table_names():
        # 외래 키 제약 조건을 먼저 삭제
        foreign_keys = inspector.get_foreign_keys('care_weekly_reports')
        for fk in foreign_keys:
            op.drop_constraint(fk['name'], 'care_weekly_reports', type_='foreignkey')
        
        # 인덱스들을 안전하게 삭제
        indexes = inspector.get_indexes('care_weekly_reports')
        for index in indexes:
            try:
                if index['name'] == 'ix_care_weekly_reports_id':
                    op.drop_index(op.f('ix_care_weekly_reports_id'), table_name='care_weekly_reports')
                elif index['name'] == 'ix_care_weekly_reports_user_id':
                    op.drop_index(op.f('ix_care_weekly_reports_user_id'), table_name='care_weekly_reports')
                elif index['name'] == 'ix_care_weekly_reports_week_end':
                    op.drop_index(op.f('ix_care_weekly_reports_week_end'), table_name='care_weekly_reports')
                elif index['name'] == 'ix_care_weekly_reports_week_start':
                    op.drop_index(op.f('ix_care_weekly_reports_week_start'), table_name='care_weekly_reports')
                elif index['name'] == 'uq_care_weekly_reports_user_week':
                    op.drop_index(op.f('uq_care_weekly_reports_user_week'), table_name='care_weekly_reports')
            except Exception:
                pass  # 인덱스가 이미 존재하지 않으면 무시
        
        op.drop_table('care_weekly_reports')
    
    # report_logs 테이블이 존재하는지 확인
    if 'report_logs' in inspector.get_table_names():
        # 외래 키 제약 조건을 먼저 삭제
        foreign_keys = inspector.get_foreign_keys('report_logs')
        for fk in foreign_keys:
            op.drop_constraint(fk['name'], 'report_logs', type_='foreignkey')
        
        indexes = inspector.get_indexes('report_logs')
        for index in indexes:
            try:
                if index['name'] == 'ix_report_logs_id':
                    op.drop_index(op.f('ix_report_logs_id'), table_name='report_logs')
            except Exception:
                pass
        op.drop_table('report_logs')
    
    # care_daily_scores 테이블이 존재하는지 확인
    if 'care_daily_scores' in inspector.get_table_names():
        # 외래 키 제약 조건을 먼저 삭제
        foreign_keys = inspector.get_foreign_keys('care_daily_scores')
        for fk in foreign_keys:
            op.drop_constraint(fk['name'], 'care_daily_scores', type_='foreignkey')
        
        indexes = inspector.get_indexes('care_daily_scores')
        for index in indexes:
            try:
                if index['name'] == 'ix_care_daily_scores_date':
                    op.drop_index(op.f('ix_care_daily_scores_date'), table_name='care_daily_scores')
                elif index['name'] == 'ix_care_daily_scores_id':
                    op.drop_index(op.f('ix_care_daily_scores_id'), table_name='care_daily_scores')
                elif index['name'] == 'ix_care_daily_scores_user_id':
                    op.drop_index(op.f('ix_care_daily_scores_user_id'), table_name='care_daily_scores')
                elif index['name'] == 'uq_care_daily_scores_user_date':
                    op.drop_index(op.f('uq_care_daily_scores_user_date'), table_name='care_daily_scores')
            except Exception:
                pass
        op.drop_table('care_daily_scores')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('care_daily_scores',
    sa.Column('id', mysql.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', mysql.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('date', sa.DATE(), nullable=False),
    sa.Column('acoustic_vit', mysql.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('acoustic_lgbm', mysql.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('language_bert', mysql.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('language_gpt', mysql.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_at', mysql.DATETIME(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name=op.f('care_daily_scores_ibfk_1')),
    sa.PrimaryKeyConstraint('id'),
    mysql_collate='utf8mb4_0900_ai_ci',
    mysql_default_charset='utf8mb4',
    mysql_engine='InnoDB'
    )
    op.create_index(op.f('uq_care_daily_scores_user_date'), 'care_daily_scores', ['user_id', 'date'], unique=True)
    op.create_index(op.f('ix_care_daily_scores_user_id'), 'care_daily_scores', ['user_id'], unique=False)
    op.create_index(op.f('ix_care_daily_scores_id'), 'care_daily_scores', ['id'], unique=False)
    op.create_index(op.f('ix_care_daily_scores_date'), 'care_daily_scores', ['date'], unique=False)
    op.create_table('report_logs',
    sa.Column('id', mysql.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', mysql.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('report_type', mysql.VARCHAR(length=20), nullable=False),
    sa.Column('report_data', mysql.JSON(), nullable=False),
    sa.Column('generated_at', mysql.DATETIME(), server_default=sa.text('(now())'), nullable=True),
    sa.Column('sent_at', mysql.DATETIME(), nullable=True),
    sa.Column('email_sent', mysql.TINYINT(display_width=1), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name=op.f('report_logs_ibfk_1')),
    sa.PrimaryKeyConstraint('id'),
    mysql_collate='utf8mb4_0900_ai_ci',
    mysql_default_charset='utf8mb4',
    mysql_engine='InnoDB'
    )
    op.create_index(op.f('ix_report_logs_id'), 'report_logs', ['id'], unique=False)
    op.create_table('care_weekly_reports',
    sa.Column('id', mysql.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', mysql.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('week_start', sa.DATE(), nullable=False),
    sa.Column('week_end', sa.DATE(), nullable=False),
    sa.Column('avg_acoustic_vit', mysql.FLOAT(), nullable=True),
    sa.Column('avg_acoustic_lgbm', mysql.FLOAT(), nullable=True),
    sa.Column('avg_language_bert', mysql.FLOAT(), nullable=True),
    sa.Column('avg_language_gpt', mysql.FLOAT(), nullable=True),
    sa.Column('report_text', mysql.TEXT(), nullable=True),
    sa.Column('email_to', mysql.VARCHAR(length=255), nullable=True),
    sa.Column('email_status', mysql.VARCHAR(length=50), nullable=True),
    sa.Column('sent_at', mysql.DATETIME(), nullable=True),
    sa.Column('retry_count', mysql.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', mysql.DATETIME(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name=op.f('care_weekly_reports_ibfk_1')),
    sa.PrimaryKeyConstraint('id'),
    mysql_collate='utf8mb4_0900_ai_ci',
    mysql_default_charset='utf8mb4',
    mysql_engine='InnoDB'
    )
    op.create_index(op.f('uq_care_weekly_reports_user_week'), 'care_weekly_reports', ['user_id', 'week_start', 'week_end'], unique=True)
    op.create_index(op.f('ix_care_weekly_reports_week_start'), 'care_weekly_reports', ['week_start'], unique=False)
    op.create_index(op.f('ix_care_weekly_reports_week_end'), 'care_weekly_reports', ['week_end'], unique=False)
    op.create_index(op.f('ix_care_weekly_reports_user_id'), 'care_weekly_reports', ['user_id'], unique=False)
    op.create_index(op.f('ix_care_weekly_reports_id'), 'care_weekly_reports', ['id'], unique=False)
    # ### end Alembic commands ###
